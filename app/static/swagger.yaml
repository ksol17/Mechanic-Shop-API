swagger: "2.0"
info:
  title: Mechanic Shop API
  version: "1.0"
  description: API documentation for Mechanic Shop
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths: 
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login a customer"
      description: "Validates customer credentials and return a customer specific token"
      parameters:
        - in: body
          name: "body"
          description: "Customer login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        '200':
          description: "Successful login"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "kjsbvpiuahsenASDKLJASDKBASKDHI..."
              message: "Login successful"
              status: "success"

  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create/register a new customer"
      description: "Endpoint creates a new customer in our library system, emails must be unique"
      parameters:
        - in: body
          name: "body"
          description: "Information required to create a new customer"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        '201':
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              phone: "123-456-7890"
              email: johnd@email.com
    get:
      tags:
        - Customers
      summary: "Returns all customers"
      description: "Endpoint to retrieve a list of all customers"
      responses:
        '200':
          description: "Endpoint to retrieve a list of all customers"
          schema:
            $ref: "#/definitions/AllCustomers"

  /customers/{id}:
    put: 
      tags:
        - Customers
      summary: "Endpoint to update a user."
      description: "Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          description: Information required to update a customer.
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        '200':
          description: "Successfully Updated customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              phone: "898-898-8989"
              email: dohnj@email.com

    delete:
     tags:
      - Customers
     summary: "Endpoint to delete a customer"
     description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account."
     security: 
      - bearerAuth: []
     responses:
       '200':
         description: "Successfully deleted customer"
         schema:
           $ref: "#/definitions/DeleteCustomerResponse"
         examples:
           application/json:
             message: "successfully deleted customer <customer_id>."

definitions: 

  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - "email"
      - "password"

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"  

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password

  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name: 
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password

  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"

  DeleteCustomerResponse:
   type: "object"
   properties:
    message:
     type: "string"